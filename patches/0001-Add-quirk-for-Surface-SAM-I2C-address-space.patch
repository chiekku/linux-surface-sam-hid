From 41247558fd269843f6147cab04923a3208e739b6 Mon Sep 17 00:00:00 2001
From: qzed <qzed@users.noreply.github.com>
Date: Fri, 5 Apr 2019 18:17:59 +0200
Subject: [PATCH] Add quirk for Surface SAM I2C address space

---
 drivers/i2c/i2c-core-acpi.c | 194 +++++++++++++++++++++++++++++++++---
 1 file changed, 181 insertions(+), 13 deletions(-)

diff --git a/drivers/i2c/i2c-core-acpi.c b/drivers/i2c/i2c-core-acpi.c
index 272800692088..c0e8d7e97842 100644
--- a/drivers/i2c/i2c-core-acpi.c
+++ b/drivers/i2c/i2c-core-acpi.c
@@ -45,6 +45,21 @@ struct i2c_acpi_lookup {
 	u32 min_speed;
 };
 
+
+/*
+ * Quirks
+ */
+
+#define I2C_ACPI_ADAPTER_QUIRK_CUSTOM_HANLDER	1ull
+
+struct i2c_acpi_adapter_quirks {
+	u64 quirks;
+	acpi_adr_space_handler handler;
+};
+
+const struct i2c_acpi_adapter_quirks *i2c_acpi_get_adapter_quirks(acpi_handle handle);
+
+
 /**
  * i2c_acpi_get_i2c_resource - Gets I2cSerialBus resource if type matches
  * @ares:	ACPI resource
@@ -650,7 +665,9 @@ i2c_acpi_space_handler(u32 function, acpi_physical_address command,
 int i2c_acpi_install_space_handler(struct i2c_adapter *adapter)
 {
 	acpi_handle handle;
+	const struct i2c_acpi_adapter_quirks *quirks;
 	struct i2c_acpi_handler_data *data;
+	acpi_adr_space_handler handler = &i2c_acpi_space_handler;
 	acpi_status status;
 
 	if (!adapter->dev.parent)
@@ -673,16 +690,23 @@ int i2c_acpi_install_space_handler(struct i2c_adapter *adapter)
 		return -ENOMEM;
 	}
 
-	status = acpi_install_address_space_handler(handle,
-				ACPI_ADR_SPACE_GSBUS,
-				&i2c_acpi_space_handler,
-				NULL,
-				data);
-	if (ACPI_FAILURE(status)) {
-		dev_err(&adapter->dev, "Error installing i2c space handler\n");
-		acpi_bus_detach_private_data(handle);
-		kfree(data);
-		return -ENOMEM;
+	quirks = i2c_acpi_get_adapter_quirks(handle);
+	if (quirks && quirks->quirks & I2C_ACPI_ADAPTER_QUIRK_CUSTOM_HANLDER) {
+		handler = quirks->handler;
+	}
+
+	if (handler) {
+		status = acpi_install_address_space_handler(handle,
+					ACPI_ADR_SPACE_GSBUS,
+					handler,
+					NULL,
+					data);
+		if (ACPI_FAILURE(status)) {
+			dev_err(&adapter->dev, "Error installing i2c space handler\n");
+			acpi_bus_detach_private_data(handle);
+			kfree(data);
+			return -ENOMEM;
+		}
 	}
 
 	acpi_walk_dep_device_list(handle);
@@ -692,7 +716,9 @@ int i2c_acpi_install_space_handler(struct i2c_adapter *adapter)
 void i2c_acpi_remove_space_handler(struct i2c_adapter *adapter)
 {
 	acpi_handle handle;
+	const struct i2c_acpi_adapter_quirks *quirks;
 	struct i2c_acpi_handler_data *data;
+	acpi_adr_space_handler handler = &i2c_acpi_space_handler;
 	acpi_status status;
 
 	if (!adapter->dev.parent)
@@ -703,9 +729,16 @@ void i2c_acpi_remove_space_handler(struct i2c_adapter *adapter)
 	if (!handle)
 		return;
 
-	acpi_remove_address_space_handler(handle,
-				ACPI_ADR_SPACE_GSBUS,
-				&i2c_acpi_space_handler);
+	quirks = i2c_acpi_get_adapter_quirks(handle);
+	if (quirks && quirks->quirks & I2C_ACPI_ADAPTER_QUIRK_CUSTOM_HANLDER) {
+		handler = quirks->handler;
+	}
+
+	if (handler) {
+		acpi_remove_address_space_handler(handle,
+					ACPI_ADR_SPACE_GSBUS,
+					handler);
+	}
 
 	status = acpi_bus_get_private_data(handle, (void **)&data);
 	if (ACPI_SUCCESS(status))
@@ -714,3 +747,138 @@ void i2c_acpi_remove_space_handler(struct i2c_adapter *adapter)
 	acpi_bus_detach_private_data(handle);
 }
 #endif /* CONFIG_ACPI_I2C_OPREGION */
+
+
+/*
+ * Quirks for Microsoft Surface Devices (SAM via HID-over-I2C).
+ */
+
+static int surface_sam_i2c_write(struct i2c_client *client, u8 *data, u8 data_len)
+{
+
+	struct i2c_msg msgs[1];
+	u8 *buffer;
+	int ret = AE_OK;
+
+	buffer = kzalloc(data_len, GFP_KERNEL);
+	if (!buffer)
+		return AE_NO_MEMORY;
+
+	memcpy(buffer, data, data_len);
+
+	msgs[0].addr = client->addr;
+	msgs[0].flags = client->flags;
+	msgs[0].len = data_len;
+	msgs[0].buf = buffer;
+
+	ret = i2c_transfer(client->adapter, msgs, ARRAY_SIZE(msgs));
+
+	kfree(buffer);
+
+	if (ret < 0) {
+		dev_err(&client->adapter->dev, "i2c write failed: %d\n", ret);
+		return ret;
+	}
+
+	/* 1 transfer must have completed successfully */
+	return (ret == 1) ? 0 : -EIO;
+}
+
+static acpi_status
+surface_sam_handler(u32 function, acpi_physical_address command,
+			u32 bits, u64 *value64,
+			void *handler_context, void *region_context)
+{
+	struct gsb_buffer *gsb = (struct gsb_buffer *)value64;
+	struct i2c_acpi_handler_data *data = handler_context;
+	struct acpi_connection_info *info = &data->info;
+	struct acpi_resource_i2c_serialbus *sb;
+	struct i2c_adapter *adapter = data->adapter;
+	struct i2c_client *client;
+	struct acpi_resource *ares;
+	u32 accessor_type = function >> 16;
+	u8 action = function & ACPI_IO_MASK;
+	acpi_status ret;
+
+	printk("surface_sam: handler called\n");
+
+	ret = acpi_buffer_to_resource(info->connection, info->length, &ares);
+	if (ACPI_FAILURE(ret))
+		return ret;
+
+	client = kzalloc(sizeof(*client), GFP_KERNEL);
+	if (!client) {
+		ret = AE_NO_MEMORY;
+		goto err;
+	}
+
+	if (!value64 || !i2c_acpi_get_i2c_resource(ares, &sb)) {
+		ret = AE_BAD_PARAMETER;
+		goto err;
+	}
+
+	if (action != ACPI_WRITE || accessor_type != ACPI_GSB_ACCESS_ATTRIB_RAW_BYTES) {
+		ret = AE_BAD_PARAMETER;
+		goto err;
+	}
+
+	client->adapter = adapter;
+	client->addr = sb->slave_address;
+
+	if (sb->access_mode == ACPI_I2C_10BIT_MODE)
+		client->flags |= I2C_CLIENT_TEN;
+
+	gsb->status = surface_sam_i2c_write(client, gsb->data, info->access_length);
+	printk("surface_sam: writing to i2c, status: %d\n", gsb->status);
+
+ err:
+	kfree(client);
+	ACPI_FREE(ares);
+	return ret;
+}
+
+static const struct i2c_acpi_adapter_quirks surface_sam_quirks = {
+	.quirks = I2C_ACPI_ADAPTER_QUIRK_CUSTOM_HANLDER,
+	.handler = surface_sam_handler,
+};
+
+static const struct i2c_acpi_adapter_quirks *quirks_check_surface_sam(acpi_handle handle)
+{
+	struct acpi_device *sam_dev;
+	acpi_handle sam;
+	acpi_status status;
+
+	printk("surface_sam: checking quirks\n");
+
+	status = acpi_get_handle(NULL, "\\_SB.PCI0.I2C0.SAM", &sam);
+	if (ACPI_FAILURE(status)) {
+		printk("surface_sam: failed to get handle to SAM\n");
+		return NULL;
+	}
+
+	status = acpi_bus_get_device(sam, &sam_dev);
+	if (ACPI_FAILURE(status)) {
+		printk("surface_sam: failed to get acpi_device\n");
+		return NULL;
+	}
+
+	if (sam_dev->parent->handle != handle) {
+		printk("surface_sam: SAM is not a child of this adapter\n");
+		return NULL;
+	}
+
+	if (!strcmp(acpi_device_hid(sam_dev), "MSHW0030")) {
+		printk("surface_sam: not a SAM device\n");
+		return NULL;
+	}
+
+	printk("surface_sam: applying quirks\n");
+
+	return &surface_sam_quirks;
+}
+
+
+const struct i2c_acpi_adapter_quirks *i2c_acpi_get_adapter_quirks(acpi_handle handle)
+{
+	return quirks_check_surface_sam(handle);
+}
-- 
2.21.0

